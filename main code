#include "D:\ad9814_mod_2 (FOR 3 boards)\ad9814_2mod.h"


#include <stdlib.h>
#include <math.h>

#define  SClock    PIN_E3
#define  SData     PIN_E2
#define  SLOAD_R   PIN_E4
#define  SLOAD_G   PIN_E5
#define  SLOAD_B   PIN_E6
#define  SLOAD_R2  PIN_H3
#define  SLOAD_G2  PIN_H4  //22, 21, 20, 19,03
#define  SLOAD_B2  PIN_H5
#define  SLOAD_R3  PIN_H6
#define  SLOAD_G3  PIN_H7
#define  SLOAD_B3  PIN_E1
#define  reset     PIN_E7

//unsigned int16 Rreg[4];                    //__8 Registers of Red Channel
//unsigned int16 Greg[4];                    //__8 Registers of Green Channel
//unsigned int16 Breg[4];                    //__8 Registers of Blue Channel

//int1 rw_bit=0;
unsigned char sel_channel=0,val_config,val_MUX,Gain=110,Offset_address=0x50, tbs1=1;
unsigned int8 Offset=0;

void init_SPI(void);
void init_SPIb(void);
void init_SPIe(void);
void init_SPIf(void);
//void RDA_isr(unsigned char);
void send_adc_data(unsigned char,unsigned char,unsigned char, unsigned char); //1-Channel, 2-Address, 3-Data
void write_value(unsigned char,unsigned char);
void rec_adc_data(unsigned char,unsigned char);       //1-Channel, 2-Address
unsigned int16 read_value(unsigned char); 
unsigned int8 PGA_val(void);
unsigned int8 Offset_val(void);

#int_RDA
void  RDA_isr()
{
char tbs2;
char ch_rda;
//tbs2 = getc();
//tbs2 =tbs1;
//printf("\n\n\rtbs1 value is %c \r", tbs1);


   switch(tbs1)
      {
      case '1':
           tbs2 = 1;
          // printf("\n\n\rtbs2 value is %c ", tbs2);
          
           break;
          
      case '2':
           tbs2 = 2;
          // printf("\n\n\rtbs2 value is %c ", tbs2);
         
           break;
      case '3':
           tbs2 = 3;
          // printf("\n\n\rtbs2 value is %c ", tbs2);
          
           break;
      }

ch_rda=tolower(getch());
   switch(ch_rda)
      {
      case 'y':
       reset_cpu();
         break;
         
      case '1':
         sel_channel=1;                      //Red channel Selected
         printf("\n\rRed");
         val_MUX=0xC0; 
         Offset_address=0x50;
        init_SPIb();
         break;
      case '2':
         sel_channel =2;                     //Green channel Selected   
         printf("\n\rGreen");
         val_MUX=0xA0; 
         Offset_address =0x60;
          init_SPIb();
         break;
      case '3':
         sel_channel =3;                     //Blue channel Selected
         printf("\n\rBlue");
         val_MUX=0x90; 
         Offset_address =0x70;
          init_SPIb();
         break;
      case 'a':
      printf("\n\rSingle Ch., 3V Clamp, 4V Input");
         val_Config=0xD0; 
         init_SPIe();
         break;
      case 'b':
      printf("\n\rSingle Ch., 4V Clamp, 4V Input*");
         val_Config=0xD8; 
         init_SPIe();
         break;
      case 'c':
      printf("\n\rSingle Ch., 3V Clamp, 2V Input");
         val_Config=0x50; 
         init_SPIe();
         break;
      case 'd':
      printf("\n\rSingle Ch., 4V Clamp, 2V Input");
         val_Config=0x58; 
         init_SPIe();
         break;
      case 'e':
         if(sel_channel==1)
            {
            printf("\n\rEnter Value for Gain\n\r");
            Gain=PGA_val(); 
           init_SPIf();
            }
         else if(sel_channel==2)
            {
            printf("\n\rEnter Value for Gain\n\r");
            Gain=PGA_val();
            init_SPIf();
            }
         else if(sel_channel==3)
            {
            printf("\n\rEnter Value for Gain\n\r");
            Gain=PGA_val(); 
            init_SPIf();
            }
       break;
       
       case 'f':
         if(sel_channel==1)
            {
            printf("\n\rEnter Value for Red Offset ");
            Offset=Offset_val(); 
            }
         else if(sel_channel==2)
            {
            printf("\n\rEnter Value for Offset ");
            Offset=Offset_val(); 
            }
         else if(sel_channel==3)
            {
            printf("\n\rEnter Value for Offset ");
            Offset=Offset_val(); 
            }
       break;
       
       case 'w':
         if(sel_channel==1)
            {
            printf("\n\rWriting For Red Channel");
            send_adc_data(1,0x00,val_config,tbs2);
             delay_ms(20);
            send_adc_data(1,0x10,val_MUX,tbs2);
             delay_ms(20);
            send_adc_data(1,0x20,Gain,tbs2);
             delay_ms(20);
            send_adc_data(1,Offset_address,Offset,tbs2);
             delay_ms(20);
            }
            
         else if(sel_channel==2)
            {
            printf("\n\rWriting For Green Channel");
            send_adc_data(2,0x00,val_config,tbs2);
             delay_ms(20);
            send_adc_data(2,0x10,val_MUX,tbs2);
             delay_ms(20);
            send_adc_data(2,0x30,Gain,tbs2);
             delay_ms(20);
            send_adc_data(2,Offset_address,Offset,tbs2);
             delay_ms(20);
            }
            
         else if(sel_channel==3)
            {
            printf("\n\rWriting For Blue Channel");
            send_adc_data(3,0x00,val_config,tbs2);
             delay_ms(20);
            send_adc_data(3,0x10,val_MUX,tbs2);
             delay_ms(20);
            send_adc_data(3,0x40,Gain,tbs2);
             delay_ms(20);
            send_adc_data(3,Offset_address,Offset,tbs2);
             delay_ms(20);
            }
       break;
         
       case 'r':
         if(sel_channel==1)
            {
            rec_adc_data(1,0x00);
             delay_ms(20);
            rec_adc_data(1,0x10);
             delay_ms(20);
            rec_adc_data(1,0x20);
             delay_ms(20);
            rec_adc_data(1,0x50);
             delay_ms(20);
            }
            
         else if(sel_channel==2)
            {
            rec_adc_data(2,0x00);
             delay_ms(20);
            rec_adc_data(2,0x10);
             delay_ms(20);
            rec_adc_data(2,0x30);
             delay_ms(20);
            rec_adc_data(2,0x60);
             delay_ms(20);
            }
            
         else if(sel_channel==3)
            {
            rec_adc_data(3,0x00);
             delay_ms(20);
            rec_adc_data(3,0x10);
             delay_ms(20);
            rec_adc_data(3,0x40);
             delay_ms(20);
            rec_adc_data(3,0x70);
             delay_ms(20);
            }
         break;
       
       case 'x':
         OUTPUT_LOW(reset);
         delay_ms(10);
         OUTPUT_HIGH(reset); break;
      }
}

//******************************************************************************
//////////////////////////////////Initialization////////////////////////////////
//******************************************************************************

void init_SPI(void)
{
  printf("\n\n\n\rOptions...");
  printf("\n\r\t1- RED Channel");
  printf("\n\r\t2- GREEN Channel");
  printf("\n\r\t3- BLUE Channel");
  printf("\n\r\t ---Chai please--- \n\n ");
  /*printf("\n\r\ta- Single Ch., 3V Clamp, 4V Input");
  printf("\n\r\tb- Single Ch., 4V Clamp, 4V Input*");
  printf("\n\r\tc- Single Ch., 3V Clamp, 2V Input");
  printf("\n\r\td- Single Ch., 4V Clamp, 2V Input");
  printf("\n\r\te- Set PGA");
  printf("\n\r\tf- Set Offset");
  printf("\n\r\tw- Write");
  printf("\n\r\tr- Read");
  printf("\n\r\tx- Reset");*/
   
  OUTPUT_HIGH(SLOAD_R);
  OUTPUT_HIGH(SLOAD_G);
  OUTPUT_HIGH(SLOAD_B); 
  OUTPUT_HIGH(SLOAD_R2);
  OUTPUT_HIGH(SLOAD_G2);
  OUTPUT_HIGH(SLOAD_B2); 
  OUTPUT_HIGH(SLOAD_R3);
  OUTPUT_HIGH(SLOAD_G3);
  OUTPUT_HIGH(SLOAD_B3); 
  OUTPUT_HIGH(reset);
  //OUTPUT_LOW(SClock);
  OUTPUT_LOW(SData);
 }
void init_SPIb(void)
{
  printf("\n\n\n\rENTER CLAMP VALUE\n...");
 printf("\n\r\ta- Single Ch., 3V Clamp, 4V Input");
  printf("\n\r\tb- Single Ch., 4V Clamp, 4V Input*");
  printf("\n\r\tc- Single Ch., 3V Clamp, 2V Input");
  printf("\n\r\td- Single Ch., 4V Clamp, 2V Input");
}

void init_SPIe(void)
{
  printf("\n\n\n\rENTER GAIN VALUE by pressing e\n...");
   printf("\n\r\te- Set PGA & press Enter and then press w to write or press f for offset  \n");
  
}
void init_SPIf(void)
{
  printf("\n\n\n\rENTER OFFSET VALUE by pressing f \n...");
  printf("\n\r\tf- Set Offset and press Enter & then press w to write  \n");
  
}
//******************************************************************************
/////////////////////////////////Write Operation////////////////////////////////
//******************************************************************************

void send_adc_data(unsigned char channel,unsigned char address,unsigned char value, unsigned char tbs3)
{
  
   printf("\n\rchannel->%X",channel);
   printf("\n\raddress->%X",address);
   printf("\n\rData->%X",value);
   printf("\n\r TBS -----> %d ", tbs3);

   if(channel==1 && tbs3 == 1)
      {
      //printf("\n\rWrite Red");
      OUTPUT_LOW(SLOAD_R);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_R);
      }
      
   else if(channel==2 && tbs3 == 1 )
      {
      printf("\n\rENTERED INTO GREEN");
      OUTPUT_LOW(SLOAD_G);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_G);
      }
     
   else if(channel==3 && tbs3 == 1)
      {
      //printf("\n\rWrite Blue");
      OUTPUT_LOW(SLOAD_B);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_B);
      }
  if (tbs3 == 2)
  {
  if(channel==1 )
      {
      //printf("\n\rWrite Red");
      OUTPUT_LOW(SLOAD_R2);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_R2);
      }
   else if(channel==2)
      {
      //printf("\n\rWrite Green");
      OUTPUT_LOW(SLOAD_G2);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_G2);
      }
    else if(channel==3)
      {
      //printf("\n\rWrite Blue");
      OUTPUT_LOW(SLOAD_B2);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_B2);
      }
  }
  if (tbs3 == 3)
  {
    if(channel==1 )
      {
      //printf("\n\rWrite Red");
      OUTPUT_LOW(SLOAD_R3);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_R3);
      }
   else if(channel==2 )
      {
      //printf("\n\rWrite Green");
      OUTPUT_LOW(SLOAD_G3);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_G3);
      }
    else if(channel==3)
      {
      //printf("\n\rWrite Blue");
      OUTPUT_LOW(SLOAD_B3);
       delay_ms(10);
      write_value(address,value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_B3);
      }
  }
}

void write_value(unsigned char address,unsigned char value)
{
   int i;
   unsigned char shift=0x80;
   printf("now writing");
   for(i=0; i<8; i++)
   {
      if( address & (shift>>i) )
         OUTPUT_HIGH(SData);
      else
         OUTPUT_LOW(SData);

      Delay_ms(2);
      OUTPUT_HIGH(SClock);
      Delay_ms(3);
      OUTPUT_LOW(SClock);
      Delay_ms(3);
   }

   for(i=0; i<8; i++)
   {
      if( value & (shift>>i) )
         OUTPUT_HIGH(SData);
      else
         OUTPUT_LOW(SData);
         
       Delay_ms(2);
      OUTPUT_HIGH(SClock);
       Delay_ms(3);
      OUTPUT_LOW(SClock);
       Delay_ms(3);
   }
    OUTPUT_LOW(SData);
}

//******************************************************************************
/////////////////////////////////Read Operation/////////////////////////////////
//******************************************************************************

void rec_adc_data(unsigned char channel,unsigned char address)
{
unsigned int16 value;
   if(channel==1)
      {
      //printf("\n\rRead Red");
      OUTPUT_LOW(SLOAD_R);
       delay_ms(10);
     value = read_value(address);
     printf("\n\rValue read: %lX", value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_R);
      }
      
   else if(channel==2)
      {
      //printf("\n\rRead Green");
      OUTPUT_LOW(SLOAD_G);
       delay_ms(10);
      value= read_value(address);
      printf("\n\rValue read: %lX", value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_G);
      }
      
   else if(channel==3)
      {
      //printf("\n\rRead Blue");
      OUTPUT_LOW(SLOAD_B);
       delay_ms(10);
     value= read_value(address);
     printf("\n\rValue read: %lX", value);
       delay_ms(10);
      OUTPUT_HIGH(SLOAD_B);
      }
      
    
}

unsigned int16 read_value(unsigned char address)
{
 int i;
 unsigned char shift=0x80;
 unsigned int16 value=0;

   for(i=0; i<8; i++)
   {
      if( address & (shift>>i) )
         OUTPUT_HIGH(SData);
      else
         OUTPUT_LOW(SData);

       Delay_ms(3);
      OUTPUT_HIGH(SClock);
       Delay_ms(3);

      if(i<7)
      {
      OUTPUT_LOW(SClock);
       Delay_ms(3);
      }
    }

Delay_ms(10);
     output_high(SData);
Delay_ms(1);

    for(i=0; i<16; i++)
    {
      OUTPUT_HIGH(SClock);
       Delay_ms(3);
      OUTPUT_LOW(SClock);
       Delay_ms(5);
      if( input(SData))
         value=value | shift>>i;
         
       Delay_ms(1);
     }
     printf("value read is %lX",value);
return (value);
}

//******************************************************************************
//////////////////////////////////PGA Value/////////////////////////////////////
//******************************************************************************

unsigned int8 PGA_val(void)
{
char string[3],ch;
float j;
unsigned int8 x=0,i=0;

for(i=0;i<16;i++)
   {
   j=i;
   printf("%2d = %.2f",i,(5.8/(1+4.8*((63-j)/63))));
   printf("\t\t%2d = %.2f",i+16,(5.8/(1+4.8*((47-j)/63))));
   printf("\t\t%2d = %.2f",i+32,(5.8/(1+4.8*((31-j)/63))));
   printf("\t\t%2d = %.2f",i+48,(5.8/(1+4.8*((15-j)/63))));
   printf("\n\r");
   }
ch=0;
i=0;
   while((ch=getchar()) != '\r')
      {
      string[i] = ch;
      i += 1;
      }
   x = atoi(string);
   if(x<0)
         x=0;
   else if(x>=63)
         x=63;
   printf("\n\rPGA Value is %X",x);
   for(i=0;i<2;i++)
      string[i] &= 0;
   return(x);
}

//******************************************************************************
/////////////////////////////////Offset Value///////////////////////////////////
//******************************************************************************

unsigned int8 Offset_val(void)
{
char string[4],ch;
signed int16 x=0,i=0;
unsigned int16 pos;
unsigned int8 val;

ch=0;
   while((ch=getchar()) != '\r')
      {
      string[i] = ch;
      i += 1;
      }
   x = atol(string);
   if(x<0){
      if(x<-300)
         x=-300;
      pos = 65535 + x;              
      pos = 65535 - pos;
      val = pos/1.1765;
      Offset_address = Offset_address | 0x01;
      printf("\n\rOfdset Value is %X",val);
   }
   else if(x>0){
      if(x>300)
         x=300;
      val = x/1.1765;
      Offset_address = Offset_address & 0x70;
      printf("\n\rOffset Value is %X",val);
   }
   for(i=0;i<4;i++)
      string[i] &= 0;
   return(val);
}

//******************************************************************************
///////////////////////////////////Main code////////////////////////////////////
//******************************************************************************

void main()
{
  
  setup_adc_ports(NO_ANALOGS|VSS_VDD);
   setup_adc(ADC_OFF);
   setup_psp(PSP_DISABLED);
   setup_spi(SPI_SS_DISABLED);
   setup_wdt(WDT_OFF);
   setup_timer_0(RTCC_INTERNAL);
   setup_timer_1(T1_DISABLED);
   setup_timer_2(T2_DISABLED,0,1);
   setup_comparator(NC_NC_NC_NC);
   setup_vref(FALSE);
  printf("\n\r Enter the Timing Board number e.g 1, 2 or 3::  ");
  tbs1 = getchar();   
  //putc(tbs1);
  printf (" The timing board value value is %c  ",tbs1);
   enable_interrupts(INT_RDA);
   enable_interrupts(GLOBAL);
   
   
   init_SPI();
   while(true)
      ;
}



